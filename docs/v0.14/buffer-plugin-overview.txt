# Buffer Plugin Overview

NOTE: This page is simply copied from LINK(v0.12):[v0.12 documents](/articles/buffer-plugin-overview), and will be updated later.

Fluentd has 7 types of plugins: [Input](input-plugin-overview), [Parser](parser-plugin-overview), [Filter](filter-plugin-overview), [Output](output-plugin-overview), [Formatter](formatter-plugin-overview), [Storage](storage-plugin-overview) and [Buffer](buffer-plugin-overview). This article gives an overview of Buffer Plugin.

## Buffer Plugin Overview

Buffer plugins are used by output plugins in buffered mode, typically by `file`, `forward`, etc. Users can choose the buffer plugin that best suits their performance and reliability needs.

## Buffer Structure

The buffer plugins have 2 internal structures: stage and queue. Buffer plugins append events to the chunks in stage ("staged" chunks), and put chunks, which are full or expired, into queue ("queued" chunks). Queued chunks will be flushed by output plugins next to next (in FIFO way: first-in, first-out).

![Fluentd v0.14 Plugin API Overview](/images/fluentd-v0.14-plugin-api-overview.png)

    :::text
                                   stage
                                   +---------+
                                   |         |
    write events to staged chunks --> chunk  |
                                   |         |
                           events --> chunk  |
                                   |         |
                           events --> chunk  |
                                   |         |
                           events --> chunk  |
                                   |         |
                                   +---------+

All chunks on stage are writable, and events will be appended into these chunks. Once chunk size reaches the limit of bytesize or records, or it exceeds time limit, that chunk will be removed from stage and pushed into queue.

    :::text
                  queue
                 +---------+
                 |         |
    push chunk  --> chunk  |
     from stage  |         |
                 |  chunk  |
                 |         |
                 |  chunk  |
                 |         |
                 |  chunk --> write out the chunk
                 |         |    queued at first
                 +---------+

Buffer plugins control size limits of each chunks, and size limits of whole buffer plugin. Output plugin referres these limits, and controls flushing and retrying.

## Parameters

* [Common Parameters](plugin-common-parameters)
* [Buffer section configurations](buffer-section)

## List of Buffer Plugins

* [buf_memory](buf_memory)
* [buf_file](buf_file)
