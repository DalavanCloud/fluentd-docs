# Buffer Plugin Overview

NOTE: This page is simply copied from LINK(v0.12):[v0.12 documents](/articles/buffer-plugin-overview), and will be updated later.

Fluentd has 7 types of plugins: [Input](input-plugin-overview), [Parser](parser-plugin-overview), [Filter](filter-plugin-overview), [Output](output-plugin-overview), [Formatter](formatter-plugin-overview), [Storage](storage-plugin-overview) and [Buffer](buffer-plugin-overview). This article gives an overview of Buffer Plugin.

## Buffer Plugin Overview

Buffer plugins are used by output plugins in buffered mode, typically by `file`, `forward`, etc. Users can choose the buffer plugin that best suits their performance and reliability needs.

## Buffer Structure

The buffer plugins have 2 internal structures: stage and queue. Buffer plugins append events to the chunks in stage ("staged" chunks), and put chunks, which are full or expired, into queue ("queued" chunks). Queued chunks will be flushed by output plugins next to next (in FIFO way: first-in, first-out).

![Fluentd v1.0 Plugin API Overview](/images/fluentd-v0.14-plugin-api-overview.png)

    :::text
                                   stage
                                   +---------+
                                   |         |
    write events to staged chunks --> chunk  |
                                   |         |
                           events --> chunk  |
                                   |         |
                           events --> chunk  |
                                   |         |
                           events --> chunk  |
                                   |         |
                                   +---------+

All chunks on stage are writable, and events will be appended into these chunks. Once chunk size reaches the limit of bytesize or records, or it exceeds time limit, that chunk will be removed from stage and pushed into queue.

    :::text
                  queue
                 +---------+
                 |         |
    push chunk  --> chunk  |
     from stage  |         |
                 |  chunk  |
                 |         |
                 |  chunk  |
                 |         |
                 |  chunk --> write out the chunk
                 |         |    queued at first
                 +---------+

Buffer plugins control size limits of each chunks, and size limits of whole buffer plugin. Output plugin referres these limits, and controls flushing and retrying.

## Control Retry Behaviour

A chunk can fail to be written out to the destination for a number of reasons. The network can go down, or the traffic volumes can exceed the capacity of the destination node. To handle such common failures gracefully, buffer plugins are equipped with a built-in retry mechanism.

### How exponential backoff works

By default, Fluentd increases the wait interval exponentially for each retry attempt. For example, assuming that the initial wait interval is set to 1 second and the exponential factor is 2, each attempt occurs at the following time points:

    1 2   4       8               16
    x-x---x-------x---------------x-------------------------
    │ │   │       │               └─  4th retry (wait = 8s)
    │ │   │       └─────────────────  3th retry (wait = 4s)
    │ │   └─────────────────────────  2th retry (wait = 2s)
    │ └─────────────────────────────  1th retry (wait = 1s)
    └───────────────────────────────  FAIL

Note that, in practice, Fluentd tweaks this algorithm in a few aspects:

 * Wait intervals are **randomized** by default. That is, Fluentd diversifies the wait interval by multiplying by a randomly-chosen number between 0.875 and 1.125. You can turn off this behaviour by setting `retry_randomize` to false.
 * Wait intervals *can* be **capped** to a certain limit. For example, if you set `retry_max_interval` to 5 seconds in the example above, the 4th retry will wait for 5 seconds, instead of 8 seconds.

If you want to disable the exponential backoff, set the `retry_type` option to "periodic".

### Handling successive failures

By default, Fluentd will break a retry loop (except a successful write) on the following conditions:

 1. The number of retries exceeds `retry_max_times` (default: none)
 2. The seconds elapsed since the first retry exceeds `retry_timeout` (default: 72h)

In these events, *all* chunks in the output queue are discarded. If you want to avoid this, you can enable `retry_forever` to make Fluentd retry indefinitely.


### Configuration Example

Below is a full configuration example which covers all the parameters controlling retry bahaviours.

```
<buffer>
  retry_wait 1                      # The wait interval for the first retry.
  retry_exponential_backoff_base 2  # Inclease the wait time by a factor of N.
  retry_type exponential_backoff    # Set 'periodic' for constant intervals.
  # retry_max_interval 1h           # Cap the wait interval. (see above)
  retry_randomize true              # Apply randomization. (see above)
  retry_timeout 72h                 # Maximum duration before giving up.
  # retry_max_times 17              # Maximum retry count before giving up.
  retry_forever false               # Set 'true' for infinite retry loops.
  retry_secondary_threshold 0.8     # See the "Secondary Output" section in
</buffer>                           # 'Output Plugins' > 'Overview'.
```

Normaly, you don't need to specify every option as in this example, because these options are, in fact, optional. As for the detail of each option, please read [this article](buffer-section#retries-parameters).

## Parameters

* [Common Parameters](plugin-common-parameters)
* [Buffer section configurations](buffer-section)

## List of Buffer Plugins

* [buf_memory](buf_memory)
* [buf_file](buf_file)
